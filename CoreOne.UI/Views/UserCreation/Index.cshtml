@using CoreOne.DOMAIN.Models
@inject NotificationHelper NotificationHelper
@using Newtonsoft.Json
@model CoreOne.DOMAIN.Models.UserCreation

@{
    ViewData["Title"] = "User Creation";
    var users = ViewBag.Users as List<UserCreation> ?? new();
    int totalRecords = ViewBag.TotalRecords ?? 0;
    int pageNumber = ViewBag.PageNumber ?? 1;
    int pageSize = ViewBag.PageSize ?? 10;
    string sortColumn = ViewBag.SortColumn ?? "";
    string sortDir = ViewBag.SortDir ?? "ASC";
    string search = ViewBag.Search ?? "";
    string searchCol = ViewBag.SearchCol ?? "";
}


<link href="~/css/usercreation.css" rel="stylesheet" />
<style>
    .row-bg {
        border: 1px solid white;
        margin-top: -20px;
        border-radius: 15px;
        background: linear-gradient(145deg, #f75964, #06498c);
        background-size: cover;
    }
    /* Make dropdown appear above table and not be cut off */
    .action-dropdown {
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
    }



    .custom-dropdown {
        z-index: 9999 !important; /* ensure it's above all elements */
        transform: translate3d(0, 0, 0); /* force GPU render for smoother display */
        background: rgba(30, 30, 30, 0.95);
        border: 1px solid rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(10px);
        border-radius: 10px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
    }
        /* Optional – enhance dropdown item styling */
        .custom-dropdown .dropdown-item {
            color: #e4e4e4;
            transition: background 0.2s ease;
        }

            .custom-dropdown .dropdown-item:hover {
                background: rgba(255, 255, 255, 0.1);
                color: #fff;
            }

    /* Ensure dropdown is not clipped by parent containers */
    .table-responsive,
    .table,
    td,
    tr {
        overflow: visible !important;
    }

</style>
<script>
    async function loadUserPhotoByFilePath(filePath, elementId) {
        // Use the same logic as loadProfilePhoto
        const img = document.getElementById(elementId);
        const defaultSrc = "/images/default-user.png";

        if (!img) return;

        // Handle invalid, null, or empty path
        if (!filePath || filePath.trim() === "" || filePath === "null" || filePath === "undefined") {
            img.src = defaultSrc;
            return;
        }

        try {
            // Use your existing API exactly as in loadProfilePhoto
            const resp = await fetch(`/api/FileUpload/viewSaved?filePath=${encodeURIComponent(filePath)}`);
            if (!resp.ok) throw new Error("Photo not found");

            const blob = await resp.blob();
            const blobUrl = URL.createObjectURL(blob);

            img.src = blobUrl;
        } catch (err) {
            console.error("Error loading user photo:", err);
            img.src = defaultSrc;
        }
    }
</script>

<style>
    /* 🔄 Preloader Styles */
    #preloader {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(13, 20, 35, 0.95);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2000;
        transition: opacity 0.6s ease, visibility 0.6s ease;
    }

        #preloader.hidden {
            opacity: 0;
            visibility: hidden;
        }

    .loader {
        text-align: center;
    }

        .loader .spin {
            font-size: 48px;
            color: #89a4cd;
            animation: spin 2s linear infinite;
        }

    .loading-text {
        color: #ffffffcc;
        margin-top: 10px;
        font-weight: 500;
        letter-spacing: 1px;
    }
</style>

<!-- 🔄 Preloader -->
<div id="preloader">
    <div class="loader">
        <i class="fas fa-globe logo-icon spin"></i>
        <div class="loading-text">Loading...</div>
    </div>
</div>

<div class="container-fluid  p-2" style="background:rgba(255, 255, 255, 0.08);">



    <div class="row" style="margin-top: -19px; margin-bottom: -6px;">
        <div class="col-12">
            <div class="page-title-box">
                <div class="page-title-right">
                    <ol class="breadcrumb m-0">
                        <li class="breadcrumb-item"><a href="javascript:void(0);">Authorization</a></li>
                        <li class="breadcrumb-item"><a href="javascript:void(0);">Dashboard</a></li>

                    </ol>
                </div>
                <h4 class="page-title">User Creation</h4>
            </div>
        </div>
    </div>



    <div class="card" style="background:rgba(255, 255, 255, 0.08);border-radius: 9px; border: 1px solid #b1d8ff; backdrop-filter: blur(12px);
              -webkit-backdrop-filter: blur(12px); border-radius: 16px; box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2); color: white;">
        <div class="card-body">

            <div class="row align-items-center p-2 mb-2" style="background:rgba(255, 255, 255, 0.08); border-radius: 9px; border: 1px solid #b1d8ff; backdrop-filter: blur(12px);
              -webkit-backdrop-filter: blur(12px); border-radius: 16px; box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2); color: white;">

                <div class="row justify-content-between">

                    <div class="col-auto">
                    <button type="button" class="btn btn-blue waves-effect waves-light" style="background: linear-gradient(135deg, #8173fa, #5a48e5);border-radius: 11px;"
                            onclick="window.location.href='/UserCreation/Index'">
                        <i class="mdi mdi-refresh-circle"></i> Refresh
                    </button>
                    <!-- VIEW TOGGLE BUTTONS ADDED -->
                    <button id="btnGridView" class="btn btn-outline-light" title="Grid View" onclick="toggleView('grid')" style="background: linear-gradient(145deg, rgb(40, 126, 213), #4fc6e1);  border-radius: 9px;">
                        <i class="mdi mdi-view-grid" style="color:white"></i>
                    </button>

                    <button id="btnListView" class="btn btn-outline-light" title="List View" onclick="toggleView('list')" style="display:none; background: linear-gradient(145deg, rgb(40, 126, 213), #4fc6e1);  border-radius: 9px;">
                        <i class="mdi mdi-format-list-bulleted" style="color:white"></i>
                    </button>

                </div>



                    <div class="col-auto">


                    <has-permission module-id="4" action-id="1">


                        <button type="button" class="btn btn-success float-end" id="btnAddUser" data-bs-toggle="modal" data-bs-target="#addUserModal" style="background: linear-gradient(135deg, #13dc72, #004993);    border-radius: 11px;">
                            <i class="mdi mdi-plus-circle"></i> Create User
                        </button>
                    </has-permission>

                </div>
                </div>
            </div>

            <div class="row align-items-center p-2" style="background:rgba(255, 255, 255, 0.08); border-radius: 9px; border: 1px solid #b1d8ff; backdrop-filter: blur(12px);
              -webkit-backdrop-filter: blur(12px); border-radius: 16px; box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2); color: white;">

                <div class="col-md-4">
                    <input type="text" id="search" value="@search" class="form-control my-1 my-lg-0" placeholder="Search..." style="border-radius: 11px;  background: linear-gradient(135deg, #f8fbff, #ffffff);" />
                </div>
                <div class="col-md-2">
                    <select class="form-select my-1 my-lg-0" id="searchCol" style="  background: linear-gradient(135deg, #f8fbff, #ffffff);   border-radius: 11px;">
                        <option value="UserName" selected> Name</option>
                        <option value="Email">Email</option>
                        <option value="PhoneNumber">Phone</option>
                        <option value="GenderName">Gender</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select class="form-select my-1 my-lg-0" id="activeStatus" style="  background: linear-gradient(135deg, #f8fbff, #ffffff);   border-radius: 11px;">
                        <option value="">All Status</option>
                        <option value="1">Active</option>
                        <option value="2">Blocked</option>
                        <option value="0">Deactivated</option>
                    </select>

                </div>
                <!-- Page Size Dropdown (like Role) -->
                <div class="col-md-2">

                    <button id="btnSearch" class="btn rounded-pill ms-2 my-1 my-lg-0" style="background: #98a6ad;color: white;">
                        <i class="mdi mdi-magnify"></i> Search
                    </button>


                </div>
                <div class="col-md-2 ms-auto d-flex justify-content-end">
                    <select class="form-select my-1 my-lg-0" id="pageSize" style="border-radius: 11px; background: linear-gradient(135deg, #f8fbff, #ffffff);">
                        @{
                            int[] pageSizes = new int[] { 1, 10, 20, 50, 100 };
                            foreach (var size in pageSizes)
                            {
                                <option value="@size" selected="@(size == pageSize)">@size</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <div class="row align-items-center p-2 mt-2 mb-2" style="background:rgba(255, 255, 255, 0.08); border-radius: 9px; border: 1px solid #b1d8ff; backdrop-filter: blur(12px);
              -webkit-backdrop-filter: blur(12px); border-radius: 16px; box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2); color: white;">

                <div id="listViewContainer" class="row" style="display:block;">
                    <div class="custom-table-responsive">
                        <table class="table custom-table table-hover table-sm small mt-2">
                        <thead class="table-light text-dark">
                            <tr>
                                <th class="justify-content-between align-items-center text-decoration-none" style="color:black">Sl No.</th>
                                <th class="justify-content-between align-items-center text-decoration-none" style="color:black">Profile</th>
                                <th class="justify-content-between align-items-center text-decoration-none" style="color:black" onclick="sortTable('UserName')">
                                    Name @Html.Raw(sortColumn == "UserName" ? (sortDir == "ASC" ? "▲" : "▼") : "")
                                </th>
                                <th class="text-start sortable" onclick="sortTable('Email')">
                                    Email @Html.Raw(sortColumn == "Email" ? (sortDir == "ASC" ? "▲" : "▼") : "")
                                </th>
                                <th class="justify-content-between align-items-center text-decoration-none" style="color:black">Phone</th>
                                <th class="justify-content-between align-items-center text-decoration-none" style="color:black" onclick="sortTable('RoleName')">
                                    Role @Html.Raw(sortColumn == "RoleName" ? (sortDir == "ASC" ? "▲" : "▼") : "")
                                </th>
                                <th class="justify-content-between align-items-center text-decoration-none" style="color:black" onclick="sortTable('GenderName')">
                                    Gender @Html.Raw(sortColumn == "GenderName" ? (sortDir == "ASC" ? "▲" : "▼") : "")
                                </th>
                                <th class="justify-content-between align-items-center text-decoration-none" style="color:black">Status</th>
                                <th class="justify-content-between align-items-center text-decoration-none" style="color:black">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int count = ((pageNumber - 1) * pageSize) + 1;
                            }
                            @if (users.Any())
                            {
                                foreach (var user in users)
                                {
                                    <tr class="align-middle">
                                            <td data-label="Sl No." class="text-center">@count</td>
                                            <td data-label="Profile" class="text-center">
                                            <img id="userPhoto_@user.UserID"
                                                 src="/images/default-user.png"
                                                 alt="Profile"
                                                 class="rounded-circle"
                                                 style="width:50px; height:50px; object-fit:cover; border:1px solid #ddd;">
                                        </td>
                                            <td data-label="Name" class="text-start fw-semibold">@user.UserName</td>
                                        <td  data-label="Email" class="text-start">@user.Email</td>
                                            <td data-label="Phone" class="text-start">@user.PhoneNumber</td>
                                            <td data-label="Role" class="text-start">@user.RoleName</td>
                                            <td data-label="Gender" class="text-start">@user.GenderName</td>
                                            <td data-label="Status" class="text-center">
                                                @{
                                                    var iconClass = user.ActiveFlag switch
                                                    {
                                                        1 => "bi-person-check-fill text-success",
                                                        0 => "bi-person-x-fill text-danger",
                                                        _ => "bi-question-circle text-secondary"
                                                    };
                                                }

                                                <i class="bi @iconClass fs-1"></i>
                                            </td>


                                            <td data-label="Actions"  class="text-center">
                                            <div class="d-flex justify-content-center align-items-center gap-2">
                                                <!-- Edit Icon -->
                                                <has-permission module-id="4" action-id="2">
                                                    <i class="mdi mdi-square-edit-outline cursor-pointer"
                                                       style="font-size: 1.3rem;color:rebeccapurple"
                                                       title="Edit User" 
                                                       onclick="editUser(@user.UserID)"></i>
                                                </has-permission>

                                                <!-- View Icon -->
                                                <has-permission module-id="4" action-id="4">
                                                    <i class="bi bi-eye-fill text-primary cursor-pointer"
                                                       style="font-size: 1.3rem;"
                                                       title="View User"
                                                       onclick="viewUser(@user.UserID)"></i>
                                                </has-permission>
                                                 

                                                <!-- Dropdown Three-Dot Icon -->
                                                    <div class="dropdown action-dropdown position-relative">
                                                        <i class="mdi mdi-dots-vertical text-secondary cursor-pointer"
                                                           style="font-size: 1.5rem;"
                                                           id="dropdownMenuButton@user.UserID"
                                                           data-bs-toggle="dropdown"
                                                           aria-expanded="false"
                                                           title="More Actions"></i>


                                                        <ul class="dropdown-menu dropdown-menu-end custom-dropdown"
                                                            aria-labelledby="dropdownMenuButton@user.UserID" style="margin: 20px">
                                                            @if (user.ActiveFlag == 0)
                                                            {
                                                                <has-permission module-id="4" action-id="10">
                                                                    <li>
                                                                        <a class="dropdown-item" href="javascript:void(0);" onclick="activateUser(@user.UserID)">
                                                                            <i class="mdi mdi-lock-open-outline me-1"></i> Activate User
                                                                        </a>
                                                                    </li>
                                                                </has-permission>
                                                            }
                                                            else if (user.ActiveFlag == 1)
                                                            {
                                                                <has-permission module-id="4" action-id="9">
                                                                    <li>
                                                                        <a class="dropdown-item" href="javascript:void(0);" onclick="deactivateUser(@user.UserID)">
                                                                            <i class="mdi mdi-lock-outline me-1"></i> Deactivate User
                                                                        </a>
                                                                    </li>
                                                                </has-permission>
                                                            }
                                                            <has-permission module-id="4" action-id="7">
                                                                <li>
                                                                    <a class="dropdown-item" href="javascript:void(0);" onclick="extraPermission(@user.UserID, @user.RoleID)">
                                                                        <i class="mdi mdi-shield-account-outline me-1"></i> Extra Permission
                                                                    </a>
                                                                </li>
                                                            </has-permission>
                                                            <has-permission module-id="4" action-id="12">
                                                                <li>
                                                                    <a class="dropdown-item" href="/Account/ChangePassword">
                                                                        <i class="mdi mdi-key-variant me-1"></i> Change Password
                                                                    </a>
                                                                </li>
                                                            </has-permission>

                                                          
                                                            <has-permission module-id="4" action-id="13">
                                                                <li>
                                                                    <a class="dropdown-item" href="javascript:void(0);" onclick="openNotificationModal(@user.UserID)" >
                                                                        <i class="bi bi-bell-fill me-1"></i> Send Reminder
                                                                    </a>
                                                                </li>
                                                            </has-permission>
                                                        </ul>
                                                    </div>

                                            </div>
                                        </td>


                                    </tr>

                                    <script>
                                        // Load user photo
                                        loadUserPhotoByFilePath(@Html.Raw(JsonConvert.SerializeObject(user.PhotoPath)), 'userPhoto_@user.UserID');
                                    </script>

                                    count++;
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="9" class="text-center text-muted py-4">No users found</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                

                </div>

        


                <div id="gridViewContainer" class="row" style="display:none;">
                    @foreach (var user in users)
                    {
                        <div class="col-xl-3 col-lg-4 col-md-6 col-sm-6">
                            <div class="user-card mb-2 shadow-lg border-0 position-relative"
                                 style="border-radius:18px; overflow:hidden; background:linear-gradient(145deg, #36404a, #043362); color:white; min-height:240px;">

                                <!-- Action Menu -->
                                <div class="dropdown position-absolute top-0 end-0 p-1">
                                    <i class="mdi mdi-dots-vertical cursor-pointer"
                                       style="font-size:18px;color: white;" data-bs-toggle="dropdown"></i>

                                    <ul class="dropdown-menu dropdown-menu-end">
                                        <!-- Edit -->
                                        <has-permission module-id="4" action-id="2">
                                            <li>
                                                <a class="dropdown-item" href="javascript:void(0)" onclick="editUser(@user.UserID)">
                                                    <i class="mdi mdi-pencil-outline me-1"></i> Edit
                                                </a>
                                            </li>
                                        </has-permission>

                                        <!-- View -->
                                        <has-permission module-id="4" action-id="4">
                                            <li>
                                                <a class="dropdown-item" href="javascript:void(0)" onclick="viewUser(@user.UserID)">
                                                    <i class="mdi mdi-eye-outline me-1"></i> View
                                                </a>
                                            </li>
                                        </has-permission>

                                        <!-- Activate / Deactivate -->
                                        @if (user.ActiveFlag == 0)
                                        {
                                            <has-permission module-id="4" action-id="10">
                                                <li>
                                                    <a class="dropdown-item" href="javascript:void(0);" onclick="activateUser(@user.UserID)">
                                                        <i class="mdi mdi-lock-open-outline me-1"></i> Activate
                                                    </a>
                                                </li>
                                            </has-permission>
                                        }
                                        else if (user.ActiveFlag == 1)
                                        {
                                            <has-permission module-id="4" action-id="9">
                                                <li>
                                                    <a class="dropdown-item" href="javascript:void(0);" onclick="deactivateUser(@user.UserID)">
                                                        <i class="mdi mdi-lock-outline me-1"></i> Deactivate
                                                    </a>
                                                </li>
                                            </has-permission>
                                        }

                                        <!-- Extra Permission -->
                                        <has-permission module-id="4" action-id="7">
                                            <li>
                                                <a class="dropdown-item" href="javascript:void(0);" onclick="extraPermission(@user.UserID, @user.RoleID)">
                                                    <i class="mdi mdi-shield-account-outline me-1"></i> Extra Permission
                                                </a>
                                            </li>
                                        </has-permission>
                                        <has-permission module-id="4" action-id="12">
                                            <li>
                                                <a class="dropdown-item" href="/Account/ChangePassword">
                                                    <i class="mdi mdi-key-variant me-1"></i> Change Password
                                                </a>
                                            </li>
                                        </has-permission>
                                        <has-permission module-id="4" action-id="13">
                                            <li>
                                                <a class="dropdown-item" href="javascript:void(0);" onclick="openNotificationModal(@user.UserID)">
                                                    <i class="mdi mdi-key-variant me-1"></i> Change Password
                                                </a>
                                            </li>
                                        </has-permission>
                                    </ul>
                                </div>

                                <div class="card-new text-center p-2 d-flex flex-column justify-content-between">

                                    <div class="photo-wrapper mx-auto mb-1" style="width: 70px; height: 70px;">
                                        <div class="photo-bg"></div>
                                        <img id="gridPhoto_@user.UserID"
                                             src="/images/default-user.png"
                                             class="profile-img shadow" style="width:70px; height:70px;">
                                    </div>

                                    <h6 class="user-name mb-1" title="@user.UserName" style="font-size:0.95rem;">
                                        @user.UserName
                                    </h6>

                                    <small class="user-gender d-flex align-items-center justify-content-center gap-1" style="font-size:0.75rem;">
                                        @if (user.GenderName == "Male")
                                        {
                                            <i class="mdi mdi-gender-male text-info"></i>
                                        }
                                        else if (user.GenderName == "Female")
                                        {
                                            <i class="mdi mdi-gender-female text-pink"></i>
                                        }
                                        else
                                        {
                                            <i class="mdi mdi-gender-transgender text-warning"></i>
                                        }
                                        @user.GenderName
                                    </small>

                                    <div class="mt-1">
                                        @if (user.ActiveFlag == 1)
                                        {
                                            <span class="badge rounded-pill bg-success px-2 py-1" style="font-size:0.7rem;">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge rounded-pill bg-danger px-2 py-1" style="font-size:0.7rem;">Inactive</span>
                                        }
                                    </div>

                                    <div class="user-phone mt-1" style="font-size:0.75rem;">
                                        <i class="mdi mdi-phone"></i> @user.PhoneNumber
                                    </div>

                                    <span class="role-badge mt-1" style="font-size:0.75rem;">@user.RoleName</span>

                                </div>

                            </div>

                        </div>

                        <script>
                            loadUserPhotoByFilePath(
                            @Html.Raw(JsonConvert.SerializeObject(user.PhotoPath)),
                                'gridPhoto_@user.UserID'
                            );
                        </script>
                    }
                </div>












                <!-- Pagination -->
                <div class="row">



                    <div class="d-flex justify-content-between align-items-center mt-2">
                        <div class="text-muted small">
                            Showing page <b>@pageNumber</b> of <b>@Math.Ceiling((double)totalRecords / pageSize)</b>
                        </div>
                        <nav>
                            <ul class="pagination pagination-sm mb-0">
                                @{
                                    int totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
                                    for (int i = 1; i <= totalPages; i++)
                                    {
                                        <li class="page-item @(i == pageNumber ? "active" : "")">
                                            <a class="page-link" href="javascript:void(0)" onclick="changePage(@i)">@i</a>
                                        </li>
                                    }
                                }
                            </ul>
                        </nav>
                    </div>

                </div>

            </div>



        </div>
    </div>




    

</div>











<!-- Notification Modal -->
<!-- 🔔 Notification Modal -->
<div class="modal fade" id="notificationModal" tabindex="-1" aria-labelledby="notificationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-bell-fill text-warning me-2"></i> Send Notification
                </h5>
                <button type="button"
                        class="btn btn-light btn-close-circle shadow-sm"
                        onclick="window.location.href='/UserCreation/Index'">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>

            <div class="modal-body">
                <!-- Hidden Fields -->
                <input type="hidden" id="notifyUserId" />
                <input type="hidden" id="notifyNotificationId" value="0" />

                <div class="mb-2">
                    <label class="form-label">Title</label>
                    <input type="text" class="form-control" id="notifyTitle" placeholder="Enter notification title..."  />
                </div>
                <div class="mb-2">
                    <label class="form-label">Notification Type</label>
                    <select id="notifyDropdown" name="notifyDropdown" class="form-select" asp-items="ViewBag.NotificationList">
                    </select>
                </div>

                <div class="mb-2">
                    <label class="form-label">Message</label>
                    <textarea class="form-control" id="notifyMessage" rows="3" placeholder="Enter message..."></textarea>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-2">
                        <label class="form-label">Start Date & Time</label>
                        <input type="datetime-local" class="form-control" id="notifyStart" />
                    </div>
                    <div class="col-md-6 mb-2">
                        <label class="form-label">End Date & Time</label>
                        <input type="datetime-local" class="form-control" id="notifyEnd" />
                    </div>
                </div>
            </div>

            <div class="modal-footer border-0 pt-1 d-flex justify-content-between">
                <button type="button"
                        onclick="window.location.href='/UserCreation/Index'"
                        class="btn btn-warning btn-sm"
                        data-bs-dismiss="modal">
                    <i class="mdi mdi-close-circle-outline me-1"></i> Cancel
                </button>

                <button type="button" id="sendreminder" class="btn btn-sm" style="background:forestgreen; color:white" onclick="sendNotification()">
                    <i class="mdi mdi-content-save-outline me-1"></i> Send
                </button>
            </div>
            
        </div>
    </div>
</div>










<!-- Add User Modal -->
<div class="modal fade" id="addUserModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content shadow-lg border-0 rounded-4">

            <!-- Header -->
            <div class="modal-header bg-primary text-white rounded-top-4">
                <h5 class="modal-title fw-bold" id="addUserModalLabel">
                    <i class="bi bi-person-plus me-2"></i>Add New User
                </h5>
         
                <button type="button"
                        class="btn btn-light btn-close-circle shadow-sm"
                        onclick="window.location.href='/UserCreation/Index'">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>

            <!-- Body -->
            <div class="modal-body px-4 py-3">
                <input type="hidden" asp-for="UserID" />

                <div class="row g-3">

                    <!-- Left Column: General Info -->
                    <div class="col-lg-6">

                        <div class="p-3 border rounded-4 shadow-sm">
                            <h6 class="text-uppercase fw-bold mb-3 border-bottom pb-2" style="Padding: 10px; background: #e9eef4; border-radius: 5px;">General Info</h6>

                            <div class="mb-3">
                                <label for="UserName" class="form-label fw-semibold">Full Name</label>
                                <input type="text" asp-for="UserName" class="form-control form-control-sm" placeholder="Enter full name" />
                                <span asp-validation-for="UserName" class="text-danger small"></span>
                            </div>

                            <div class="mb-3">
                                <label for="PasswordHash" class="form-label fw-semibold">Password</label>
                                <input type="text" asp-for="PasswordHash" class="form-control form-control-sm" placeholder="Enter Password" />
                                <span asp-validation-for="PasswordHash" class="text-danger small"></span>
                            </div>

                            <div class="mb-3">
                                <label for="RoleID" class="form-label fw-semibold">User Role</label>
                                @Html.DropDownList("RoleID", ViewBag.RoleList as List<SelectListItem>, new { @class = "form-select form-select-sm" })
                                <span asp-validation-for="RoleID" class="text-danger small"></span>
                            </div>

                            <div class="mb-3">
                                <label for="GenderID" class="form-label fw-semibold">Gender</label>
                                @Html.DropDownList("GenderID", ViewBag.GenderList as List<SelectListItem>, new { @class = "form-select form-select-sm" })
                                <span asp-validation-for="GenderID" class="text-danger small"></span>
                            </div>
                            <div class="mb-3">
                                <label for="PhoneNumber" class="form-label fw-semibold">Phone Number</label>
                                <input type="text" asp-for="PhoneNumber" class="form-control form-control-sm" placeholder="Enter phone number" />
                                <span asp-validation-for="PhoneNumber" class="text-danger small"></span>
                            </div>
                        </div>

                    </div>

                    <!-- Right Column: Profile & Other Data -->
                    <div class="col-lg-6">

                        <!-- Profile Image Section -->
                        <div class="p-3 border rounded-4 shadow-sm mb-3 bg-light">
                            <h6 class="text-uppercase fw-bold mb-3 border-bottom pb-2" style="Padding: 10px; background: #e9eef4; border-radius: 5px;">Profile Image</h6>

                            <div class="text-center mb-2">
                                <div class="border rounded-circle overflow-hidden mx-auto mb-2" style="width: 100px; height: 100px;">
                                    <img id="profilePreview" src="/images/default-user.png" alt="Profile" class="img-fluid w-100 h-100 object-fit-cover" />
                                </div>

                                <div class="d-flex justify-content-center gap-2 mb-2">
                                    <button class="btn btn-outline-primary btn-sm px-3" onclick="openFileUpload('UserCreation')">
                                        <i class="bi bi-upload me-1"></i>Upload
                                    </button>
                                    <button type="button" class="btn btn-outline-info btn-sm px-3" id="showFile" style="display:none" onclick="openFileViewModalshow()">
                                        <i class="bi bi-eye me-1"></i>View
                                    </button>
                                </div>

                                <span id="PhotoPath" class="text-danger small d-block"></span>
                            </div>
                        </div>

                        <!-- Other Data Section -->
                        <div class="p-3 border rounded-4 shadow-sm">
                            <h6 class="text-uppercase fw-bold mb-3 border-bottom pb-2" style="Padding: 10px; background: #e9eef4; border-radius: 5px;">
                                Mail Info
                            </h6>

                            <div class="mb-3">
                                <label for="MailTypeID" class="form-label fw-semibold">Mail Type</label>
                                @Html.DropDownList("MailTypeID", ViewBag.MailTypeList as List<SelectListItem>, new { @class = "form-select form-select-sm" })
                                <span asp-validation-for="MailTypeID" class="text-danger small"></span>
                            </div>

                            <div class="mb-3">
                                <label for="Email" class="form-label fw-semibold">Email Address</label>
                                <input type="email" asp-for="Email" class="form-control form-control-sm" placeholder="example@domain.com" />
                                <span asp-validation-for="Email" class="text-danger small"></span>
                            </div>
                        </div>

                    </div>

                </div>

            </div>

            <!-- Footer -->
            <div class="modal-footer d-flex justify-content-between px-4">
            
                <button type="button"
                        class="btn btn-warning btn-sm"
                        data-bs-dismiss="modal" onclick=" window.location.href='/UserCreation/Index' ">
                    <i class="mdi mdi-close-circle-outline me-1"></i> Cancel
                </button>
                <button type="button" id="btnSaveUser" class="btn btn-success px-4">
                    <i class="bi bi-check-circle me-1"></i>Save User
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="permissionModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content border-0 shadow-lg rounded-4 overflow-hidden">

            <!-- Header -->
            <div class="modal-header text-white"
                 style="background: linear-gradient(135deg, #4facfe, #4facfe);">
                <h5 class="modal-title fw-bol   d d-flex align-items-center">
                    <i class="bi bi-ui-checks-grid me-2"></i> Manage Extra Permissions
                </h5>
                <button type="button"
                        class="btn btn-light rounded-circle d-flex align-items-center justify-content-center shadow-sm"
                        onclick="window.location.href='/UserCreation/Index'"
                        style="width: 38px; height: 38px; border: none;">
                    <i class="bi bi-x-lg text-dark fw-bold"></i>
                </button>
            </div>

            <!-- Body -->
            <div class="modal-body bg-light">

                <!-- Role dropdown -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <label class="form-label fw-semibold text-dark">Select Role</label>
                        <select id="roleDropdown"
                                class="form-select shadow-sm border rounded-3 px-3 py-2"
                                onchange="onRoleChange()"
                                style="transition: all 0.2s ease;">
                            <option value="">-- Choose Role --</option>
                            @if (ViewBag.Roles != null)
                            {
                                List<RolePermission> roles = ViewBag.Roles as List<RolePermission>;
                                @foreach (var role in roles)
                                {
                                    <option value="@role.RoleID">@role.RoleName</option>
                                }
                            }
                        </select>
                    </div>
                </div>

                <!-- Global Select All -->
                <div class="alert alert-light border rounded-3 shadow-sm d-flex align-items-center justify-content-between px-3 py-2">
                    <span class="fw-bold text-dark">
                        <i class="bi bi-check2-circle text-success"></i> Select All Permissions
                    </span>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="selectAllGlobal">
                    </div>
                </div>

                <!-- Permissions container -->
                <div id="permissionsContainer" class="accordion mt-3">
                    <p class="text-muted">Choose a role to load permissions...</p>
                </div>
            </div>

            <!-- Footer -->
            <div class="modal-footer border-0 bg-light d-flex justify-content-end gap-2">
                <!-- Save Button -->
                <button type="button"
                        class="btn text-white fw-semibold d-flex align-items-center gap-2"
                        style="background: linear-gradient(135deg, #42e695, #3bb2b8); border-radius: 10px; padding: 0.6rem 1.4rem; transition: all 0.3s;"
                        id="SaveExtraPermissions"
                        onclick="saveExtraPermissions()">
                    <i class="bi bi-save-fill"></i> Save
                </button>

                <!-- Close Button -->
                <button type="button"
                        class="btn btn-warning border fw-semibold d-flex align-items-center gap-2"
                        style="border-radius: 10px; padding: 0.6rem 1.4rem; transition: all 0.3s;"
                        onclick="window.location.href='/UserCreation/Index'">
                    <i class="bi bi-x-circle"></i> Close
                </button>
            </div>



        </div>
    </div>
</div>

<script src="~/js/usercreation.js"></script>


@section Scripts {
    <script>
             function openNotificationModal(userId, notificationId = 0, title = '', message = '', start = '', end = '', notificationTypeId = '') {
            $('#notifyUserId').val(userId);
            $('#notifyNotificationId').val(notificationId);

            $('#notifyTitle').val(title || '');
            $('#notifyMessage').val(message || '');
            $('#notifyStart').val(start ? start.replace('Z', '') : '');
            $('#notifyEnd').val(end ? end.replace('Z', '') : '');

            // 🟢 Now safely set dropdown
            $('#notifyDropdown').val(notificationTypeId || '');

            $('#notificationModal').modal('show');
        }



        $(document).on('change', '#notifyStart, #notifyEnd', function () {
            const start = $('#notifyStart').val();
            const end = $('#notifyEnd').val();

            if (start && end) {
                const startDate = parseLocalDateTime(start);
                const endDate = parseLocalDateTime(end);

                if (endDate.getTime() <= startDate.getTime()) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Invalid Date Range',
                        text: 'End date/time must be later than the start date/time.',
                        confirmButtonColor: '#3085d6'
                    });
                    $('#notifyEnd').val('');
                }
            }
        });

        // ✅ Helper: Parse datetime-local without timezone offset
        function parseLocalDateTime(dateTimeString) {
            const [date, time] = dateTimeString.split('T');
            const [year, month, day] = date.split('-').map(Number);
            const [hour, minute] = time.split(':').map(Number);
            return new Date(year, month - 1, day, hour, minute);
        }


        // 🟢 Save notification (insert or update)
        async function sendNotification() {
            const userId = $('#notifyUserId').val();
            const notificationId = $('#notifyNotificationId').val() || 0;
            const title = $('#notifyTitle').val().trim();
            const message = $('#notifyMessage').val().trim();
            const startDateTime = $('#notifyStart').val();
            const endDateTime = $('#notifyEnd').val();
         const notificationTypeId = $('#notifyDropdown').val() || 0;


            // 🟡 Validate required fields
            if (!title || !message) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Missing Fields',
                    text: 'Please enter both title and message.',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }

            if (!startDateTime || !endDateTime) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Missing Dates',
                    text: 'Please select both start and end date/time.',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }

            const start = new Date(startDateTime);
            const end = new Date(endDateTime);

            // ✅ Strict check: end must be later than start
            if (end.getTime() <= start.getTime()) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid Dates',
                    text: 'End date/time must be later than the start date/time.',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }

            // 🟢 Confirm before sending
            const confirmResult = await Swal.fire({
                title: 'Send Notification?',
                text: "Do you want to send this notification now?",
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, Send it!',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33'
            });

            if (!confirmResult.isConfirmed) return;

             const payload = {
            NotificationID: parseInt(notificationId),
            UserID: parseInt(userId),
            Title: title,
            Message: message,
            NotificationTypeID: parseInt(notificationTypeId),
            IsRead: 0,
            IsActive: 1,
            StartDateTime: startDateTime,
            EndDateTime: endDateTime,
            CreatedBy: 1,
            UpdatedBy: 1
        };


            try {
                const response = await fetch('/UserCreation/SaveUserNotification', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Sent!',
                        text: result.message || 'Notification sent successfully.',
                        timer: 2000,
                        showConfirmButton: false
                    }).then(() => {
                        window.location.href = '/UserCreation/Index';
                    });

                    $('#notificationModal').modal('hide');
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: result.message || 'Failed to send notification.',
                        confirmButtonColor: '#d33'
                    });
                }
            } catch (error) {
                console.error('Error sending notification:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Something went wrong while sending notification.',
                    confirmButtonColor: '#d33'
                });
            }
        }
    </script>




    <script>


              document.addEventListener("DOMContentLoaded", function() {
            // Get last saved view from localStorage
            const savedView = localStorage.getItem("userView");

            if(savedView === "grid") {
                toggleView("grid");
            } else {
                toggleView("list"); // default
            }
        });

        function toggleView(view) {
            const grid = document.getElementById("gridViewContainer");
            const list = document.getElementById("listViewContainer");
            const btnGrid = document.getElementById("btnGridView");
            const btnList = document.getElementById("btnListView");

            if (view === "grid") {
                grid.style.display = "flex";
                list.style.display = "none";
                btnGrid.style.display = "none";
                btnList.style.display = "inline-block";
            } else {
                grid.style.display = "none";
                list.style.display = "block";
                btnGrid.style.display = "inline-block";
                btnList.style.display = "none";
            }

            // Save user preference
            localStorage.setItem("userView", view);
        }






        (function () {
            // Current server-side values
            const current = {
                pageNumber: parseInt('@pageNumber'),
                pageSize: parseInt('@pageSize'),
                search: '@(search ?? "")',
                searchCol: '@(searchCol ?? "")',
                sortColumn: '@(sortColumn ?? "")',
                sortDir: '@(sortDir ?? "ASC")',
                status: '@(ViewBag.Status ?? "")'
            };

            function buildUrl(params) {
                const qs = new URLSearchParams();
                qs.set('pageNumber', params.pageNumber ?? current.pageNumber);
                qs.set('pageSize', params.pageSize ?? current.pageSize);
                if ((params.search ?? current.search) !== '') qs.set('search', params.search ?? current.search);
                qs.set('searchCol', params.searchCol ?? current.searchCol);
                qs.set('sortColumn', params.sortColumn ?? current.sortColumn);
                qs.set('sortDir', params.sortDir ?? current.sortDir);
                if ((params.status ?? current.status) !== '') qs.set('status', params.status ?? current.status);
                return `/UserCreation/Index?` + qs.toString();
            }

            function navigateTo(params) {
                window.location.href = buildUrl(params);
            }

            // Page change
            window.changePage = function (page) {
                navigateTo({ pageNumber: page });
            };

            // Sorting
            window.sortTable = function (column) {
                let newDir = current.sortDir === 'ASC' ? 'DESC' : 'ASC';
                if (current.sortColumn !== column) newDir = 'ASC';
                navigateTo({ pageNumber: 1, sortColumn: column, sortDir: newDir });
            };

            // Search button
            $('#btnSearch').click(function () {
                const search = $('#search').val();
                const searchCol = $('#searchCol').val();
                const status = $('#activeStatus').val();
                navigateTo({ pageNumber: 1, search: search, searchCol: searchCol, status: status });
            });

            // Page Size change
            $('#pageSize').on('change', function () {
                navigateTo({ pageNumber: 1, pageSize: parseInt($(this).val(), 10) });
            });
        })();

        // Edit/Delete functions

    </script>
    <script>
        // Preloader hide on page load
        window.addEventListener('load', function () {
            const preloader = document.getElementById('preloader');
            if (preloader) {
                preloader.classList.add('hidden');
                setTimeout(() => preloader.remove(), 600); // removes after fade-out
            }
        });




















    </script>



}

