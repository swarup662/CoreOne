@model CoreOne.COMMON.Models.MenuWithModulesSave

@using CoreOne.COMMON.Models
@{
    ViewData["Title"] = "Menu Module Master";

    int pageNumber = ViewBag.PageNumber ?? 1;
    int pageSize = ViewBag.PageSize ?? 10;
    int totalRecords = ViewBag.TotalRecords ?? 0;
    int totalPages = (int)Math.Ceiling(totalRecords / (double)pageSize);

    string search = ViewBag.Search ?? "";
    string sortColumn = ViewBag.SortColumn ?? "MenuName";
    string sortDir = ViewBag.SortDir ?? "ASC";
    string searchCol = ViewBag.SearchCol ?? "MenuName";

    var modules = ViewBag.MenuModules as List<MenuModuleDto> ?? new List<MenuModuleDto>();

    int maxWindow = 5;
    int startPage = 1;
    int endPage = totalPages;
    if (totalPages > maxWindow)
    {
        int half = maxWindow / 2;
        startPage = pageNumber - half;
        endPage = pageNumber + half;
        if (startPage < 1) { startPage = 1; endPage = maxWindow; }
        else if (endPage > totalPages) { endPage = totalPages; startPage = totalPages - maxWindow + 1; }
    }
    else { startPage = 1; endPage = totalPages; }
}
<style>
    /* Table base */
    .table {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    }

        /* Table header */
        .table thead tr {
            background: linear-gradient(135deg, #4facfe, #00f2fe);
         
            font-weight: 600;
            text-transform: uppercase;
        }

        /* Table body rows */
        .table tbody tr {
            background-color: #ffffff;
            transition: all 0.3s ease;
        }

    /* Table cells */
    .table th,
    .table td {
        border: 1px solid #d1d5db; /* light gray borders */
        vertical-align: middle;
        padding: 0.75rem 1rem;
    }

   

 
</style>

<div class="container-fluid">

    <div class="row">
        <div class="col-12">
            <div class="page-title-box">
                <div class="page-title-right">
                    <ol class="breadcrumb m-0">
                        <li class="breadcrumb-item"><a href="javascript:void(0);">Menu & Module</a></li>
                        <li class="breadcrumb-item"><a href="javascript:void(0);">Dashboard</a></li>
                        <li class="breadcrumb-item active">SetUp</li>
                    </ol>
                </div>
                <h4 class="page-title">Module SetUp</h4>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="row justify-content-between">
                <div class="col-auto">
                    <button type="button" class="btn btn-blue waves-effect waves-light float-end rounded-pill" style="background: linear-gradient(135deg, #8173fa, #5a48e5);"
                            onclick="window.location.href='/MenuModule/Index'">
                        <i class="mdi mdi-refresh-circle"></i> Refresh
                    </button>
                </div>
                <div class="col-auto">

                    <button type="button" class="btn btn-success float-end rounded-pill" data-bs-toggle="modal" data-bs-target="#moduleSetupModal" style="background: linear-gradient(135deg, #13dc72, #004993);">
                            <i class="mdi mdi-plus-circle"></i> Create Module SetUp
                        </button>
               
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">

            <div class="row mb-3 align-items-center">
                <div class="col-md-3">
                    <input type="search" id="searchBox" value="@search" class="form-control rounded-pill" placeholder="Search..." />
                </div>
                <div class="col-md-2">
                    <select class="form-select rounded-pill" id="searchField">
                        @{
                            string[] searchableFields = { "MenuName", "ModuleName" };
                            string[] searchableNames = { "Menu", "Modules" };
                            for (int i = 0; i < searchableFields.Length; i++)
                            {
                                var field = searchableFields[i];
                                <option value="@field" selected="@(field == searchCol)">@searchableNames[i]</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <button id="btnSearch" class="btn rounded-pill" style="background:linear-gradient(135deg, #4ad7f8, #0487a5);color:white; border: 1px solid #4fc6e1;">
                        <i class="mdi mdi-magnify"></i> Search
                    </button>
                </div>
                <div class="col-md-2 ms-auto d-flex justify-content-end">
                    <select class="form-select rounded-pill" id="pageSize">
                        @{
                            int[] pageSizes = { 1, 10, 20, 50, 100 };
                            foreach (var size in pageSizes)
                            {
                                <option value="@size" selected="@(size == pageSize)">@size</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <style>
                .module-badge {
                    display: inline-block;
                    padding: 0.35em 0.75em;
                    font-weight: 600;
                    color: #fff;
                    border: 2px solid #424e5a;
                    background: linear-gradient(135deg, #005fbe, #1682ff);
                    box-shadow: 0 2px 6px rgba(0,0,0,0.15);
                    transition: transform 0.2s, box-shadow 0.2s;
                }

                    .module-badge:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
                    }

            </style>

            <table class="table table-bordered  table-hover">
                <thead>
                    <tr style="background: #f3f7f9;color:black">
                        <th style="color:black">Sl No</th>
                        <th style ="color:black">
                            <a href="javascript:void(0)" style="color:black"  onclick="sortTable('MenuName')" class="d-flex justify-content-between">
                                Menu
                                @(sortColumn == "MenuName" ? (sortDir == "ASC" ? "↑" : "↓") : "↕")
                            </a>
                        </th>
                        <th >Modules</th>
                        <th style="color:black">
                            <a href="javascript:void(0)" style="color:black" onclick="sortTable('CreatedDate')" class="d-flex justify-content-between">
                                Created Date
                                @(sortColumn == "CreatedDate" ? (sortDir == "ASC" ? "↑" : "↓") : "↕")
                            </a>
                        </th>
                        <th style="color:black">Action</th>
                    </tr>
                </thead>

            
                <tbody>
                    @{
                        int count = ((pageNumber - 1) * pageSize) + 1;
                        foreach (var m in modules)
                        {
                            <tr>
                                <td>@count</td>
                                <td class="text-body fw-semibold">@m.MenuName</td>
                                <td>
                                    @{
                                        if (!string.IsNullOrEmpty(m.Modules))
                                        {
                                            var modulesList = m.Modules.Split(',');
                                            foreach (var moduleName in modulesList)
                                            {
                                                <span class="badge module-badge  me-1">@moduleName.Trim()</span>
                                            }
                                        }
                                    }
                                </td>

                                <td>@(m.CreatedDate?.ToString("dd-MM-yyyy"))</td>
                                <td>
                                    <button class="btn btn-sm btn-primary" onclick="openEditModal(@m.MenuModuleID)">Edit</button>
                                    <button class="btn btn-sm btn-danger" onclick="deleteMenu(@m.MenuModuleID)">Delete</button>
                                </td>
                            </tr>
                            count++;
                        }
                        if (!modules.Any())
                        {
                            <tr><td colspan="5" class="text-center text-muted">No records found</td></tr>
                        }
                    }
                </tbody>
            </table>

            <!-- Pagination -->
            <nav>
                <ul class="pagination">
                    <li class="page-item @(pageNumber==1?"disabled":"")">
                        <a class="page-link" href="javascript:void(0)" data-page="@(pageNumber - 1)">Prev</a>
                    </li>

                    @for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i==pageNumber?"active":"")">
                            <a class="page-link" href="javascript:void(0)" data-page="@i">@i</a>
                        </li>
                    }

                    <li class="page-item @(pageNumber>=totalPages?"disabled":"")">
                        <a class="page-link" href="javascript:void(0)" data-page="@(pageNumber + 1)">Next</a>
                    </li>
                </ul>
            </nav>

        </div>
    </div>

</div>



<div class="modal fade" id="moduleSetupModal" tabindex="-1" aria-labelledby="moduleModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="moduleModalLabel">Create Menu & Modules</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <form id="menuModuleForm">
                <div class="modal-body">
                    <input asp-for="MenuModuleID" type="hidden" id="hdnMenuModuleID" />
                    <!-- MENU SECTION -->
                    <div class="p-3 mb-3 rounded border bg-light">
                        <div class="row">
                            <div class="col-xl-6">
                                <div class="mb-3">
                                    <label class="form-label">Menu Name</label>
                                    <input type="text" id="MenuName" class="form-control" placeholder="Enter Menu Name" />
                                    <span id="MenuName-error" class="text-danger"></span>

                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Sequence</label>
                                    <input type="number" id="MenuSeq" class="form-control" placeholder="Enter Menu Sequence" />
                                    <span id="MenuSeq-error" class="text-danger"></span>
                                </div>
                            </div>

                            <div class="col-xl-6">
                                <div class="mb-3">
                                    <label class="form-label">Menu Icon</label>
                                    <input type="text" id="MenuSymbol" class="form-control" placeholder="Select Icon" readonly />
                                    <span id="MenuSymbol-error" class="text-danger"></span>
                                </div>

                                <div class="icon-scroll-container">
                                    <div class="icons-list-demo d-flex flex-nowrap" id="iconList">
                                        <div class="icon-item mx-1"><i class="fe-home"></i></div>
                                        <div class="icon-item mx-1"><i class="fe-settings"></i></div>
                                        <div class="icon-item mx-1"><i class="fe-user"></i></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- MODULE SECTION -->
                    <div class="p-3 mb-3 rounded border bg-light">
                        <div class="row">
                            <div class="col-md-4">
                                <label class="form-label">Module Name</label>
                                <input type="text" id="ModuleName" class="form-control" placeholder="Enter Module Name" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Module URL</label>
                                <input type="text" id="ModuleUrl" class="form-control" placeholder="Enter Module URL" />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Sequence</label>
                                <input type="number" id="ModuleSeq" class="form-control" placeholder="Seq" />
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button type="button" class="btn btn-primary w-100" id="addModuleBtn">Add</button>
                            </div>
                        </div>

                        <table class="table table-bordered table-striped mt-3" id="moduleTable">
                            <thead class="table-light">
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>URL</th>
                                    <th>Sequence</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>

                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="btnSavemenu" class="btn btn-success">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- ✅ Styles -->
<style>
    .icon-scroll-container {
        overflow-x: auto;
        white-space: nowrap;
        padding: 8px;
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        background: #fff;
    }

    .icon-item {
        flex: 0 0 auto;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 18px;
        border-radius: 6px;
        background-color: #f9fafb;
        cursor: pointer;
        transition: 0.2s ease-in-out;
    }

        .icon-item:hover {
            background-color: #e9f3ff;
            transform: scale(1.1);
        }

        .icon-item.selected {
            border: 2px solid #0d6efd;
            background-color: #e6f0ff;
        }

    .icon-scroll-container::-webkit-scrollbar {
        height: 6px;
    }

    .icon-scroll-container::-webkit-scrollbar-thumb {
        background-color: #b0c4de;
        border-radius: 10px;
    }
</style>







@section Scripts {
    





 



    <script>





        // Open edit modal
        function openEditModal(menuId) {
            fetch(`/MenuModule/GetMenuForEdit?id=${menuId}`)
                .then(res => res.ok ? res.json() : Promise.reject("Failed to load menu"))
                .then(data => {
                    if (!data) throw new Error("No data returned");

                    // Populate menu fields
                    $("#hdnMenuModuleID").val(data.menuID);
                    $("#MenuName").val(data.menuName);
                    $("#MenuSeq").val(data.menuSeq);
                    $("#MenuSymbol").val(data.menuSymbol);

                    const tbody = $("#moduleTable tbody").empty();

                    if (data.modules && data.modules.length > 0) {
                        // Sort modules by sequence ascending
                        const sortedModules = data.modules.sort((a, b) => a.sequence - b.sequence);

                        sortedModules.forEach(m => {
                            // Check for duplicates in the existing table
                            const seqExists = $("#moduleTable tbody tr").filter(function () {
                                return parseInt($(this).find(".moduleSeq").text()) === m.sequence;
                            }).length > 0;

                            if (!seqExists) {
                                tbody.append(`
                                    <tr data-module-id="${m.moduleID}">
                                        <td class="moduleId" style="display:none">${m.moduleID}</td>
                                        <td class="moduleName">${m.name}</td>
                                        <td class="moduleUrl">${m.url}</td>
                                        <td class="moduleSeq">${m.sequence}</td>
                                        <td><button type="button" class="btn btn-danger btn-sm removeModule">Remove</button></td>
                                    </tr>
                                `);
                            }
                        });
                    }

                    $("#moduleSetupModal").modal("show");
                })
                .catch(err => alert(err));
        }


              // Add module to table
        $("#addModuleBtn").click(function () {
            const name = $("#ModuleName").val().trim();
            const url = $("#ModuleUrl").val().trim();
            const seq = $("#ModuleSeq").val().trim();

            // Validate empty fields
            if (!name || !url || !seq) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please enter Module Name, URL, and Sequence.'
                });
                return;
            }

            // Check for duplicate sequence
            let seqExists = false;
            $("#moduleTable tbody tr").each(function () {
                const existingSeq = $(this).find(".moduleSeq").text();
                if (parseInt(existingSeq) === parseInt(seq)) {
                    seqExists = true;
                    return false; // break loop
                }
            });

            if (seqExists) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Sequence number already exists. Please use a unique sequence.'
                });
                return;
            }

            // Create new row
            const row = `<tr data-module-id="">
                <td class="moduleId" style="display:none"></td>
                <td class="moduleName">${name}</td>
                <td class="moduleUrl">${url}</td>
                <td class="moduleSeq">${seq}</td>
                <td><button type="button" class="btn btn-danger btn-sm removeModule">Remove</button></td>
            </tr>`;

            // Insert row in ascending sequence order
            let inserted = false;
            $("#moduleTable tbody tr").each(function () {
                const currentSeq = parseInt($(this).find(".moduleSeq").text());
                if (parseInt(seq) < currentSeq) {
                    $(this).before(row);
                    inserted = true;
                    return false;
                }
            });

            if (!inserted) {
                $("#moduleTable tbody").append(row);
            }

            // Clear input fields
            $("#ModuleName, #ModuleUrl, #ModuleSeq").val('');
        });

        // Remove module
        $(document).on("click", ".removeModule", function () {
            $(this).closest("tr").remove();
        });








                 // Map input IDs to model property names
        const fieldMap = {
            "MenuName": "Name",
            "MenuSeq": "Sequence",
            "MenuSymbol": "MenuSymbol"
        };


                // When user clicks an icon
        $("#iconList .icon-item").click(function () {
            // Get the icon name or identifier (for example, use class)
            const iconClass = $(this).find("i").attr("class"); // e.g., "fe-home"

            // Set the input value
            $("#MenuSymbol").val(iconClass);

            // Trigger validation for MenuSymbol
            const menuId = $("#hdnMenuModuleID").val() || null;
            validateMenuField("MenuSymbol", menuId);
        });

        // Validate Menu fields with server AND client empty check
        function validateMenuField(fieldId, menuId = null) {
            let $input = $("#" + fieldId);
            let $errorSpan = $("#" + fieldId + "-error");
            let value = $input.val().trim();

            // Clear previous state
            $input.removeClass("is-invalid is-valid");
            $errorSpan.text('');

            // Client-side empty check
            if (!value) {
                $input.addClass("is-invalid");
                $errorSpan.text("This field is required.");
                return $.Deferred().resolve().promise(); // Stop AJAX, already invalid
            }

            // Server-side validation
            let payload = {};
            payload[fieldId] = value;
            if (menuId) payload["MenuModuleID"] = menuId;

            return $.ajax({
                url: '/MenuModule/ValidateMenuField',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(payload),
                success: function (resp) {
                    const modelField = fieldMap[fieldId];
                    if (resp.errors && resp.errors[modelField]) {
                        $input.addClass("is-invalid");
                        $errorSpan.text(resp.errors[modelField][0]);
                    } else {
                        $input.addClass("is-valid");
                    }
                }
            });
        }

        // Real-time validation
        $("#MenuName, #MenuSeq, #MenuSymbol").on("input change", function () {
            const menuId = $("#hdnMenuModuleID").val() || null;
            validateMenuField(this.id, menuId);
        });

               // Save Menu + Modules
        $("#btnSavemenu").click(async function () {
            const menuId = $("#hdnMenuModuleID").val();

            // Validate menu fields first
                  // Validate menu fields first
        await validateMenuField("MenuName", menuId);
        await validateMenuField("MenuSeq", menuId);
        await validateMenuField("MenuSymbol", menuId);

        // Prevent save if validation fails
        if ($("#MenuName").hasClass("is-invalid") ||
            $("#MenuSeq").hasClass("is-invalid") ||
            $("#MenuSymbol").hasClass("is-invalid")) {

            
            return; // stop execution
        }

        // Check if at least one module exists
        const moduleCount = $("#moduleTable tbody tr").length;
        if (moduleCount === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                text: 'Please add at least one module before saving.'
            });
            return; // stop execution
        }

        // Continue to build payload and save...


            // Build payload
            const menuWithModules = {
                MenuModuleID: menuId ? parseInt(menuId) : null,
                Name: $("#MenuName").val().trim(),
                MenuSymbol: $("#MenuSymbol").val().trim(),
                Sequence: parseInt($("#MenuSeq").val()),
                RecType: menuId ? 'U' : 'I',
                Modules: []
            };

            // Collect modules
            $("#moduleTable tbody tr").each(function () {
                const row = $(this);
                const moduleId = row.data("module-id");

                menuWithModules.Modules.push({
                    ModuleID: moduleId ? parseInt(moduleId) : null,
                    Name: row.find(".moduleName").text().trim(),
                    Url: row.find(".moduleUrl").text().trim(),
                    Sequence: parseInt(row.find(".moduleSeq").text())
                });
            });

            // Send save request
            try {
                const resp = await fetch("/MenuModule/SaveMenuWithModules", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(menuWithModules)
                });

                if (!resp.ok) {
                    const errText = await resp.text();
                    throw new Error(errText);
                }

                const result = await resp.json();
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Menu & Modules saved successfully.',
                    timer: 2000,
                    showConfirmButton: false
                }).then(() => {
                    $("#moduleSetupModal").modal("hide");
                    location.reload();
                });

            } catch (err) {
                console.error(err);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Error saving menu/modules: ' + err.message
                });
            }
        });









    </script>
    <script>


        (function(){
            const searchInput = document.getElementById('searchBox');
            const searchField = document.getElementById('searchField');
            const pageSizeSelect = document.getElementById('pageSize');
            const btnSearch = document.getElementById('btnSearch');

            const current = {
                pageNumber: @pageNumber,
                pageSize: @pageSize,
                search: "@search",
                searchCol: "@searchCol",
                sortColumn: "@sortColumn",
                sortDir: "@sortDir"
            };

            function buildUrl(params){
                const qs = new URLSearchParams();
                qs.set('pageNumber', params.pageNumber ?? 1);
                qs.set('pageSize', params.pageSize ?? current.pageSize);
                if((params.search ?? current.search) !== '') qs.set('search', params.search ?? current.search);
                qs.set('searchCol', params.searchCol ?? current.searchCol);
                qs.set('sortColumn', params.sortColumn ?? current.sortColumn);
                qs.set('sortDir', params.sortDir ?? current.sortDir);
                return '@Url.Action("Index", "MenuModule")' + '?' + qs.toString();
            }

            function navigateTo(opts){ window.location.href = buildUrl(opts); }

            // Search button click
            btnSearch?.addEventListener('click', () => {
                navigateTo({
                    pageNumber: 1,
                    search: searchInput.value,
                    searchCol: searchField.value,
                    pageSize: parseInt(pageSizeSelect.value, 10),
                    sortColumn: current.sortColumn,
                    sortDir: current.sortDir
                });
            });

            // Page size change
            pageSizeSelect?.addEventListener('change', () => {
                navigateTo({
                    pageNumber: 1,
                    search: searchInput.value,
                    searchCol: searchField.value,
                    pageSize: parseInt(pageSizeSelect.value, 10),
                    sortColumn: current.sortColumn,
                    sortDir: current.sortDir
                });
            });

            // Pagination links
            document.querySelectorAll('.pagination a.page-link').forEach(el => {
                el.addEventListener('click', ev => {
                    ev.preventDefault();
                    const page = parseInt(el.dataset.page,10) || 1;
                    navigateTo({
                        pageNumber: page,
                        search: searchInput.value,
                        searchCol: searchField.value,
                        pageSize: parseInt(pageSizeSelect.value, 10),
                        sortColumn: current.sortColumn,
                        sortDir: current.sortDir
                    });
                });
            });

            // Sorting
            window.sortTable = function(column){
                let newDir = current.sortColumn === column && current.sortDir === 'ASC' ? 'DESC' : 'ASC';
                navigateTo({
                    pageNumber: 1,
                    search: searchInput.value,
                    searchCol: searchField.value,
                    pageSize: parseInt(pageSizeSelect.value, 10),
                    sortColumn: column,
                    sortDir: newDir
                });
            };
        })();
        document.addEventListener("DOMContentLoaded", function () {
            const icons = document.querySelectorAll(".icon-item");
            const input = document.getElementById("MenuSymbol");

            icons.forEach(icon => {
                icon.addEventListener("click", function () {
                    // remove previous selection
                    icons.forEach(i => i.classList.remove("selected"));
                    this.classList.add("selected");

                    // extract class name
                    const iconClass = this.querySelector("i").className.trim();
                    input.value = iconClass;
                });
            });
        });
    </script>

}
