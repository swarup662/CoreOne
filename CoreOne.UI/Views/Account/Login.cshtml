@model CoreOne.DOMAIN.Models.LoginViewModel

@{
    Layout = "_LoginLayout";
}
<style>

    body.authentication-bg-pattern {
        background-image: url('@Url.Content("~/assets/images/bg-material1.jpg")');
        background-attachment: fixed;
        background-size: cover;
        background-repeat: no-repeat;
    }

    /* 🔹 Logo Icon */
    .logo-icon {
        font-size: 32px;
        color: #89a4cd;
        text-shadow: 0 0 10px rgba(137, 164, 205, 0.6);
        transition: color 0.3s ease, text-shadow 0.3s ease, transform 0.3s ease;
    }

        .logo-icon:hover {
            color: #a5bdf0;
            text-shadow: 0 0 14px rgba(137, 164, 205, 0.8);
            transform: scale(1.05);
        }

    /* 🔹 App Name Text */
    .app-name {
        font-size: 28px;
        background: linear-gradient(90deg, #c33030, #0f54bd);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-weight: 700;
        letter-spacing: 1px;
        text-transform: uppercase;
        transition: background 0.3s ease, transform 0.3s ease;
    }

    /* 💬 Subtitle */
    .subtitle {
        color: rgba(255, 255, 255, 0.85);
        font-size: 15px;
        font-weight: 400;
        letter-spacing: 0.5px;
        margin-top: 5px;
        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.25);
    }

    /* 🌈 Gradient Login Button */
    .login-btn {
        background: linear-gradient(135deg, #f75964 0%, #078c46 100%);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 10px 0;
        font-weight: 600;
        letter-spacing: 0.5px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
    }

        .login-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }

    /* 🌫️ Glass Effect Style */
    .glass-card {
        background: rgba(255, 255, 255, 0.08);
        border: 1px solid rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(12px);
        -webkit-backdrop-filter: blur(12px);
        border-radius: 16px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
        color: white;
    }
















    /* 🔄 Preloader Styles */
    #preloader {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(13, 20, 35, 0.95);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2000;
        transition: opacity 0.6s ease, visibility 0.6s ease;
    }

        #preloader.hidden {
            opacity: 0;
            visibility: hidden;
        }

    .loader {
        text-align: center;
    }

        .loader .spin {
            font-size: 48px;
            color: #89a4cd;
            animation: spin 2s linear infinite;
        }

    .loading-text {
        color: #ffffffcc;
        margin-top: 10px;
        font-weight: 500;
        letter-spacing: 1px;
    }


</style>
<!-- 🔄 Preloader -->
<div id="preloader">
    <div class="loader">
        <i class="fas fa-globe logo-icon spin"></i>
        <div class="loading-text">Loading...</div>
    </div>
</div>



<body class="authentication-bg authentication-bg-pattern">

    <div class="account-pages">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-8 col-lg-6 col-xl-4 mt-5">

                    <!-- Glass effect card -->
                    <div class="card glass-card">
                        <div class="card-body">
                            <div class="text-center w-75 m-auto login-header">
                                <div class="auth-logo mb-3">
                                    <a href="/Home/Index" class="logo d-flex align-items-center justify-content-center text-decoration-none">
                                        <i class="fas fa-globe logo-icon me-2"></i>
                                        <span class="fw-bold app-name">CoreOne</span>
                                    </a>
                                </div>
                                <p class="subtitle">Enter your username and password to access the admin panel.</p>
                            </div>

                            <form method="post">
                                <div class="mb-3">
                                    <label class="form-label" style="color:white">Username</label>
                                    <input type="text" class="form-control" asp-for="UserName" placeholder="Enter your username" />
                                    <span class="text-danger" asp-validation-for="UserName"></span>
                                </div>

                                <div class="mb-3">
                                    <label for="password" class="form-label" style="color:white">Password</label>
                                    <div class="input-group input-group-merge">
                                        <input type="password" id="password" class="form-control" asp-for="Password" placeholder="Enter your password" />
                                        <div class="input-group-text" id="togglePassword" style="cursor: pointer;">
                                            <i data-feather="eye"></i>
                                        </div>
                                    </div>
                                    <span class="text-danger" asp-validation-for="Password"></span>
                                </div>

                                <div class="mb-3">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="checkbox-signin">
                                        <label class="form-check-label" for="checkbox-signin">Remember me</label>
                                    </div>
                                </div>

                                @if (TempData["ErrorMessage"] != null)
                                {
                                    <div id="errorMessage" class="alert alert-danger">@TempData["ErrorMessage"]</div>
                                }

                                @if (TempData["SuccessMessage"] != null)
                                {
                                    <div id="successMessage" class="alert alert-success">@TempData["SuccessMessage"]</div>
                                }

                                <div class="text-center d-grid">
                                    <button class="btn login-btn" type="submit">Log In</button>
                                </div>

                                <div class="text-center mt-3">
                                    <a href="/Account/ForgotPassword" class="text-decoration-none" style="color:white">Forgot Password?</a>
                                </div>
                            </form>
                        </div>
                    </div>
                    <!-- end card -->
                </div>
            </div>
        </div>
    </div>

    @* Transparent Toast Container *@
    @{
        var message = TempData["message"];
    }

    @if (message != null)
    {
        var messagetype = TempData["messagetype"]?.ToString() ?? "warning";
        var toastColor = messagetype.ToLower() switch
        {
            "error" => "danger",
            "success" => "success",
            _ => "warning"
        };
        var toastBg = messagetype.ToLower() switch
        {
            "error" => "rgba(255,0,0,0.1)",
            "success" => "rgba(40,167,69,0.15)",
            _ => "rgba(255,193,7,0.15)"
        };
        var toastIcon = messagetype.ToLower() switch
        {
            "error" => "bi-exclamation-triangle-fill",
            "success" => "bi-check-circle-fill",
            _ => "bi-exclamation-circle-fill"
        };
        <div aria-live="polite" aria-atomic="true" class="position-fixed top-0 end-0 p-3" style="z-index: 1080;">
            <div class="toast show border border-@toastColor rounded shadow-sm" style="background-color:@toastBg;" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body text-@toastColor d-flex align-items-center">
                        <i class="bi @toastIcon me-2 fs-5"></i>
                        @message
                    </div>
                    <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        </div>
    }

    <script src="~/assets/js/vendor.min.js"></script>
    <script src="~/assets/js/app.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize Feather icons
            feather.replace();

            // Toggle password visibility reliably
            const togglePassword = document.getElementById("togglePassword");
            const passwordField = document.getElementById("password");

            if (togglePassword && passwordField) {
                togglePassword.addEventListener("click", function () {
                    if (passwordField.type === "password") {
                        passwordField.type = "text";
                        this.innerHTML = '<i data-feather="eye-off"></i>';
                    } else {
                        passwordField.type = "password";
                        this.innerHTML = '<i data-feather="eye"></i>';
                    }
                    feather.replace(); // refresh icon
                });
            }

            // Initialize Bootstrap Toasts
            var toastElList = [].slice.call(document.querySelectorAll('.toast'));
            toastElList.forEach(function (toastEl) {
                var toast = new bootstrap.Toast(toastEl, { delay: 3000 });
                toast.show();

                toastEl.addEventListener('hidden.bs.toast', function () {
                    fetch('@Url.Action("ClearTempData", "Account")', { method: 'POST' });
                });
            });
        });
    </script>
</body>









<script>
    // Preloader hide on page load
    window.addEventListener('load', function () {
        const preloader = document.getElementById('preloader');
        if (preloader) {
            preloader.classList.add('hidden');
            setTimeout(() => preloader.remove(), 600); // removes after fade-out
        }
    });
</script>
