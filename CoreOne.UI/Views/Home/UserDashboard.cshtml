
@using CoreOne.DOMAIN.Models
@using CoreOne.UI.Controllers
@using CoreOne.UI.Helper
@inject MenuLayoutController MenuController
@inject IHttpContextAccessor HttpContextAccessor
@{

    var userId = TokenHelper.GetUserIdFromToken(HttpContextAccessor.HttpContext);
    bool TokenExpiry = TokenHelper.IsTokenValid(HttpContextAccessor.HttpContext);
    var menuItems = new List<MenuItem>();
    User user = new User();
    if (!userId.HasValue || !TokenExpiry)
    {
        TempData["message"] = "Please Login again";
        TempData["messagetype"] = "error";
        // Redirect to login if userId is null
        HttpContextAccessor.HttpContext.Response.Redirect("/Account/Login");
        // Don't return; let the layout render a minimal page
    }
    else
    {
        var TokenUser = TokenHelper.UserFromToken(Context);
        // Load menu
        if (TokenUser is not null)
        {
            user = TokenUser;
        }
        menuItems = await MenuController.UserMenu(Context);
        if (menuItems.Count == 0)
        {
            // Redirect to login if userId is null
            HttpContextAccessor.HttpContext.Response.Redirect("/Account/Login");
        }



    }
    // Group menu items by Parent
    // Group items by ParentID (i.e., top-level menu sections)
    var groupedMenu = menuItems
        .GroupBy(m => new { m.ParentID, m.ParentName, m.ParentSequence, m.MenuSymbol })
        .OrderBy(g => g.Key.ParentSequence ?? 0)
        .ToList();

}



<div class="page-title-box">
    <div class="page-title-right">
        <form class="d-flex align-items-center mb-3">
            <div class="input-group input-group-sm">
                <input type="hidden" class="form-control border-0 shadow flatpickr-input" id="dash-daterange" value="2025-10-27"><input class="form-control border-0 shadow input active" placeholder="" tabindex="0" type="text" readonly="readonly">
                <span class="input-group-text bg-primary border-primary text-white">
                    <i class="mdi mdi-calendar-range"></i>
                </span>
            </div>
            <a href="/Home/UserDashboard" class="btn btn-primary btn-sm ms-2">
                <i class="mdi mdi-autorenew"></i>
            </a>

            <a href="javascript: void(0);" class="btn btn-primary btn-sm ms-1">
                <i class="mdi mdi-filter-variant"></i>
            </a>
        </form>
    </div>
    <h4 class="page-title">Welcome ! @user.UserName</h4>
</div>




<script>
    document.addEventListener("DOMContentLoaded", function () {
        const today = new Date().toISOString().split("T")[0];

        document.getElementById("dash-daterange").value = today;
        document.querySelector(".input-group input[type='text']").value = today;
    });
</script>
















@* Transparent Toast Container (top-right) *@
@{
    var message = TempData["message"];

}

@if (message != null)
{
    var messagetype = TempData["messagetype"];
    string messageType = "";
    if (messagetype is not null)
    {
        messageType = messagetype.ToString();
    }
    if (string.Equals(messageType, "error", StringComparison.OrdinalIgnoreCase))
    {
        <div aria-live="polite" aria-atomic="true" class="position-fixed top-0 end-0 p-3" style="z-index: 1080;">
            <div class="toast show border border-danger rounded shadow-sm" style="background-color: rgba(255, 0, 0, 0.1);" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body text-danger d-flex align-items-center">
                        <i class="bi bi-exclamation-triangle-fill me-2 fs-5"></i>
                        @message
                    </div>
                    <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        </div>
    }
    else if (string.Equals(messageType, "success", StringComparison.OrdinalIgnoreCase))
    {
        <div aria-live="polite" aria-atomic="true" class="position-fixed top-0 end-0" style="z-index: 1080; padding: 7rem 1rem 1rem 1rem;">
            <div class="toast show border border-success rounded shadow-sm"
                 style="background-color: rgba(40, 167, 69, 0.15);"
                 role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body text-success d-flex align-items-center">
                        <i class="bi bi-check-circle-fill me-2 fs-5"></i>
                        @message
                    </div>
                    <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        </div>
    }
    else
    {
        // Fallback: Warning when messageType is null or unrecognized
        <div aria-live="polite" aria-atomic="true" class="position-fixed top-0 end-0 mt-5 me-3" style="z-index: 1080;">
            <div class="toast show border border-warning rounded shadow-sm"
                 style="background-color: rgba(255, 193, 7, 0.15);"
                 role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body text-warning d-flex align-items-center">
                        <i class="bi bi-exclamation-circle-fill me-2 fs-5"></i>
                        @message
                    </div>
                    <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        </div>
    }
}




@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var toastElList = [].slice.call(document.querySelectorAll('.toast'));
            toastElList.forEach(function (toastEl) {
                var toast = new bootstrap.Toast(toastEl, {
                    delay: 2000  //  seconds
                });
                toast.show();

                // Optional: clear TempData when toast is closed
                toastEl.addEventListener('hidden.bs.toast', function () {
                    fetch('@Url.Action("ClearTempData", "Account")', { method: 'POST' });
                });
            });
        });
    </script>
}
